{
  "home": {
    "welcome": "NIPs Explorer",
    "nostr_intro": "Nostr is an open protocol for decentralized communication. It enables users to send and receive messages and other data over a network of relays.",
    
    "protocol_basics": "Protocol Basics",
    "protocol_basics_intro": "Nostr is based on a simple but powerful event model. Every interaction in the network is an event with a defined structure.",
    
    "event_structure": {
      "title": "Event Structure",
      "id_desc": "Unique ID (SHA256 hash of event data)",
      "pubkey_desc": "Public key of the author",
      "created_at_desc": "Creation timestamp (Unix timestamp)",
      "kind_desc": "Type of event (e.g., 1 for text message)",
      "tags_desc": "Additional metadata and references",
      "content_desc": "The actual content of the event",
      "sig_desc": "Digital signature for verification"
    },

    "protocol_concepts": {
      "title": "Core Concepts",
      "nips_vs_kinds": "NIPs vs Event Kinds",
      "nips_vs_kinds_explanation": "NIPs (Nostr Implementation Possibilities) and Event Kinds are two different but important concepts in Nostr:"
    },

    "nips_section": {
      "title": "What are NIPs?",
      "intro": "NIPs (Nostr Implementation Possibilities) are proposals and standards that describe how various aspects of the Nostr protocol can be implemented. They help developers create compatible and interoperable applications.",
      "docs": "NIPs are documents that describe various aspects of the Nostr protocol. They can propose new features, improve existing features, or provide best practices for implementing the protocol.",
      "website": "On this website, you will find explanations and examples of various NIPs to help you better understand and use the Nostr protocol.",
      "explanation": {
        "title": "NIPs (Nostr Implementation Possibilities)",
        "description": "NIPs are technical specification documents that describe:",
        "points": [
          "How new features should be implemented in the Nostr protocol",
          "What standards all clients and relays must follow",
          "How different types of data are structured",
          "How communication between clients and relays works"
        ],
        "example": "For example, NIP-01 describes the basic protocol, while NIP-02 defines the format for contact lists."
      },
      "examples": {
        "title": "NIP Examples:",
        "nip01": "NIP-01: Basic Protocol",
        "nip02": "NIP-02: Contact List",
        "nip03": "NIP-03: OpenTimestamps Attestations",
        "nip04": "NIP-04: Encrypted Direct Messages"
      }
    },

    "event_kinds": {
      "title": "Event Kinds",
      "explanation_title": "What are Event Kinds?",
      "explanation_intro": "Event Kinds are numerical identifiers that define the type and purpose of a single event. They are part of the actual data and determine:",
      "purpose_points": [
        "What type of content an event contains",
        "How clients should display the content",
        "How relays should process the event",
        "How long the event should be stored"
      ],
      "connection_to_nips": "Event Kinds are defined and standardized in various NIPs. For example, the basic Kinds 0-3 were established in NIP-01.",
      "ranges": {
        "title": "Kind Ranges and Their Meaning",
        "regular": "Regular events like metadata, text messages, and contact lists",
        "regular_replaceable": "Replaceable events where only the latest version is relevant",
        "ephemeral": "Short-lived events that don't need permanent storage",
        "parameterized": "Parameterized events for special use cases"
      },
      "common_title": "Commonly Used Event Kinds",
      "metadata": "Profile information like name, picture, and description",
      "text_note": "Public text messages (similar to tweets)",
      "recommend_server": "Recommendations for relay servers",
      "contacts": "List of followed users and their preferred relays",
      "direct_message": "Encrypted direct messages",
      "deletion": "Deletes previously published events"
    },

    "implementation_example": {
      "title": "Example of the Connection:",
      "content": "NIP-01 defines that an event of Kind 1 is a public text message. So when a client receives an event with kind: 1, it knows thanks to NIP-01 that it should display the content as a text message."
    },

    "relays_section": {
      "title": "What are Relays?",
      "intro": "Relays are servers that forward messages and other data in the Nostr network. They act as intermediaries between clients and ensure that messages are delivered to the correct recipients.",
      "features": {
        "decentralized": {
          "title": "Decentralized",
          "description": "Anyone can operate a relay"
        },
        "redundant": {
          "title": "Redundant",
          "description": "Multiple relays for reliability"
        },
        "flexible": {
          "title": "Flexible",
          "description": "Free choice of relays"
        },
        "scalable": {
          "title": "Scalable",
          "description": "Distributed load balancing"
        }
      }
    },

    "clients_section": {
      "title": "What are Clients?",
      "intro": "Clients are applications that users use to interact with the Nostr network. They allow users to send and receive messages, publish data, and access information shared by other users.",
      "types": {
        "web": {
          "title": "Web Clients",
          "description": "Direct access via browser"
        },
        "mobile": {
          "title": "Mobile Apps",
          "description": "For iOS and Android on the go"
        },
        "desktop": {
          "title": "Desktop Apps",
          "description": "Full functionality on computer"
        }
      }
    },

    "summary": {
      "title": "Summary",
      "text": "Nostr is a decentralized communication protocol based on relays and clients. NIPs provide the standards and proposals that help developers implement and extend the protocol. This website offers an introduction to Nostr and NIPs, as well as examples and explanations to help you better understand and use the protocol."
    }
  },

  "nip1": {
    "nip1_title": "NIP-01",
    "key_protocol": "Basic Protocol",
    "key_protocol_description": "This NIP defines the basic protocol that should be implemented by all. It describes the structure and flow of events.",
    "event_format": "Event Format",
    "event_format_description": "Events have a specific format that includes a type, tags, content, and signature. The signature is based on the SHA-256 hash of the serialized event data.",
    "filters_and_subscriptions": "Filters and Subscriptions",
    "filters_and_subscriptions_description": "Clients can use filters to subscribe to specific events from relays. Filters can be specified by IDs, authors, kinds, and timestamps.",
    "websocket_connections": "WebSocket Connections",
    "websocket_connections_description": "Relays provide WebSocket endpoints that clients can connect to. Clients should use a single WebSocket connection per relay.",
    "example_usage": "Example Usage",
    "example_usage_intro": "Here is a simple example of using events in a protocol:",
    "example_usage_scenario": "Imagine you want to create an event that represents a message from a user. The event might look like this:",
    "example_message_content": "Hello, how are you?",
    "example_explanation": "In this example:",
    "example_id": "A unique identifier for the event.",
    "example_pubkey": "The username or ID of the author.",
    "example_created_at": "The creation date of the event in Unix timestamp.",
    "example_kind": "The type of event, in this case, a message.",
    "example_tags": "A list of tags that categorize the event.",
    "example_content": "The actual content of the message.",
    "example_sig": "A digital signature that ensures the integrity and authenticity of the event.",
    "example_filters": "Clients can then use filters to subscribe to only specific events, e.g., all messages from 'user123' or all events with the tag 'chat'.",
    "event_fetcher": "Event Fetcher",
    "fetched_event": "Fetched Event",
    "detailed_github_page": "Detailed GitHub Page"
  },

  "nip2": {
    "nip2_title": "NIP-02",
    "description": "This NIP describes the second implementation possibility for the Nostr protocol.",
    "details": "Here is a detailed explanation of NIP-02.",
    "example_usage": "Example Usage",
    "example_usage_intro": "Here is a simple example of using NIP-02 in a protocol:",
    "example_usage_scenario": "Imagine you want to create an event that represents a user action. The event might look like this:",
    "example_message_content": "Example content for user action",
    "example_explanation": "In this example:",
    "example_id": "A unique identifier for the event.",
    "example_pubkey": "The username or ID of the author.",
    "example_created_at": "The creation date of the event in Unix timestamp.",
    "example_kind": "The type of event, in this case, a user action.",
    "example_tags": "A list of tags that categorize the event.",
    "example_content": "The actual content of the user action.",
    "example_sig": "A digital signature that ensures the integrity and authenticity of the event.",
    "example_filters": "Clients can then use filters to subscribe to only specific events, e.g., all actions from 'user123' or all events with the tag 'action'.",
    "event_fetcher": "Event Fetcher",
    "fetched_event": "Fetched Event",
    "detailed_github_page": "Detailed GitHub Page"
  }
}