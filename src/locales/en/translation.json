{
  "home": {
    "welcome": "NIPs Explorer",
    "nostr_intro": "Nostr is an open protocol for decentralized communication. It enables users to send and receive messages and other data over a network of relays.",
    
    "protocol_basics": "Protocol Basics",
    "protocol_basics_intro": "Nostr is based on a simple but powerful event model. Every interaction in the network is an event with a defined structure.",
    
    "event_structure": {
      "title": "Event Structure",
      "id_desc": "Unique ID (SHA256 hash of event data)",
      "pubkey_desc": "Public key of the author",
      "created_at_desc": "Creation timestamp (Unix timestamp)",
      "kind_desc": "Type of event (e.g., 1 for text message)",
      "tags_desc": "Additional metadata and references",
      "content_desc": "The actual content of the event",
      "sig_desc": "Digital signature for verification"
    },

    "protocol_concepts": {
      "title": "Core Concepts",
      "nips_vs_kinds": "NIPs vs Event Kinds",
      "nips_vs_kinds_explanation": "NIPs (Nostr Implementation Possibilities) and Event Kinds are two different but important concepts in Nostr:"
    },

    "nips_section": {
      "title": "What are NIPs?",
      "intro": "NIPs (Nostr Implementation Possibilities) are proposals and standards that describe how various aspects of the Nostr protocol can be implemented. They help developers create compatible and interoperable applications.",
      "docs": "NIPs are documents that describe various aspects of the Nostr protocol. They can propose new features, improve existing features, or provide best practices for implementing the protocol.",
      "website": "On this website, you will find explanations and examples of various NIPs to help you better understand and use the Nostr protocol.",
      "explanation": {
        "title": "NIPs (Nostr Implementation Possibilities)",
        "description": "NIPs are technical specification documents that describe:",
        "points": [
          "How new features should be implemented in the Nostr protocol",
          "What standards all clients and relays must follow",
          "How different types of data are structured",
          "How communication between clients and relays works"
        ],
        "example": "For example, NIP-01 describes the basic protocol, while NIP-02 defines the format for contact lists."
      },
      "examples": {
        "title": "NIP Examples:",
        "nip01": "NIP-01: Basic Protocol",
        "nip02": "NIP-02: Contact List",
        "nip03": "NIP-03: OpenTimestamps Attestations",
        "nip04": "NIP-04: Encrypted Direct Messages"
      }
    },

    "event_kinds": {
      "title": "Event Kinds",
      "explanation_title": "What are Event Kinds?",
      "explanation_intro": "Event Kinds are numerical identifiers that define the type and purpose of a single event. They are part of the actual data and determine:",
      "purpose_points": [
        "What type of content an event contains",
        "How clients should display the content",
        "How relays should process the event",
        "How long the event should be stored"
      ],
      "connection_to_nips": "Event Kinds are defined and standardized in various NIPs. For example, the basic Kinds 0-3 were established in NIP-01.",
      "ranges": {
        "title": "Kind Ranges and Their Meaning",
        "regular": "Regular events like metadata, text messages, and contact lists",
        "regular_replaceable": "Replaceable events where only the latest version is relevant",
        "ephemeral": "Short-lived events that don't need permanent storage",
        "parameterized": "Parameterized events for special use cases"
      },
      "common_title": "Commonly Used Event Kinds",
      "metadata": "Profile information like name, picture, and description",
      "text_note": "Public text messages (similar to tweets)",
      "recommend_server": "Recommendations for relay servers",
      "contacts": "List of followed users and their preferred relays",
      "direct_message": "Encrypted direct messages",
      "deletion": "Deletes previously published events"
    },

    "implementation_example": {
      "title": "Example of the Connection:",
      "content": "NIP-01 defines that an event of Kind 1 is a public text message. So when a client receives an event with kind: 1, it knows thanks to NIP-01 that it should display the content as a text message."
    },

    "relays_section": {
      "title": "What are Relays?",
      "intro": "Relays are servers that forward messages and other data in the Nostr network. They act as intermediaries between clients and ensure that messages are delivered to the correct recipients.",
      "features": {
        "decentralized": {
          "title": "Decentralized",
          "description": "Anyone can operate a relay"
        },
        "redundant": {
          "title": "Redundant",
          "description": "Multiple relays for reliability"
        },
        "flexible": {
          "title": "Flexible",
          "description": "Free choice of relays"
        },
        "scalable": {
          "title": "Scalable",
          "description": "Distributed load balancing"
        }
      }
    },

    "clients_section": {
      "title": "What are Clients?",
      "intro": "Clients are applications that users use to interact with the Nostr network. They allow users to send and receive messages, publish data, and access information shared by other users.",
      "types": {
        "web": {
          "title": "Web Clients",
          "description": "Direct access via browser"
        },
        "mobile": {
          "title": "Mobile Apps",
          "description": "For iOS and Android on the go"
        },
        "desktop": {
          "title": "Desktop Apps",
          "description": "Full functionality on computer"
        }
      }
    },

    "summary": {
      "title": "Summary",
      "text": "Nostr is a decentralized communication protocol based on relays and clients. NIPs provide the standards and proposals that help developers implement and extend the protocol. This website offers an introduction to Nostr and NIPs, as well as examples and explanations to help you better understand and use the protocol."
    }
  },
    "nip1": {
      "nip1_title": "NIP-01: Basic Protocol",
      "key_protocol": "Basic Protocol",
      "key_protocol_description": "NIP-01 defines the fundamental concepts and mechanisms of the Nostr protocol. It is the cornerstone for all other NIPs and must be supported by all Nostr implementations.",
      
      "sections": {
        "overview": {
          "title": "Overview",
          "points": [
            "NIP-01 establishes the basic structure of events",
            "Defines communication between clients and relays",
            "Describes authentication and validation of events",
            "Establishes the publish/subscribe model for data exchange"
          ]
        },
  
        "event_structure": {
          "title": "Event Structure",
          "description": "An event is the basic data unit in Nostr. Every action and piece of information is transmitted as an event.",
          "fields": {
            "id": {
              "title": "ID",
              "description": "A SHA-256 hash of all other event fields. Serves as a unique identifier.",
              "technical": "Calculated from the serialization of event data (excluding 'id' and 'sig')"
            },
            "pubkey": {
              "title": "Public Key",
              "description": "The event author's public key in hexadecimal format.",
              "technical": "32-byte Schnorr key"
            },
            "created_at": {
              "title": "Creation Timestamp",
              "description": "Unix timestamp of event creation in seconds.",
              "technical": "Must be a valid Unix timestamp"
            },
            "kind": {
              "title": "Event Kind",
              "description": "Numerical value defining the type of event.",
              "examples": [
                "0: Metadata (profile information)",
                "1: Short text note",
                "2: Recommended relay servers",
                "3: Contacts",
                "4: Encrypted direct message"
              ]
            },
            "tags": {
              "title": "Tags",
              "description": "List of tags for additional metadata and references.",
              "common_tags": [
                "e: Reference to other events",
                "p: Reference to public keys",
                "t: Thematic hashtags"
              ]
            },
            "content": {
              "title": "Content",
              "description": "The actual content of the event as text.",
              "notes": [
                "Can contain any text",
                "Format depends on event kind",
                "Can be encrypted"
              ]
            },
            "sig": {
              "title": "Signature",
              "description": "Cryptographic signature to verify authenticity.",
              "technical": "64-byte Schnorr signature of the event ID value"
            }
          }
        },
  
        "relay_communication": {
          "title": "Relay Communication",
          "description": "Communication between clients and relays occurs via WebSocket connections.",
          "messages": {
            "types": {
              "title": "Message Types",
              "EVENT": "Send a new event",
              "REQ": "Request events with specific filters",
              "CLOSE": "End a subscription",
              "EOSE": "End of stored event stream"
            }
          },
          "subscription": {
            "title": "Subscription System",
            "description": "Clients can subscribe to events using filters:",
            "filter_options": [
              "ids: Specific event IDs",
              "authors: Events from specific authors",
              "kinds: Specific event types",
              "since: Events after a timestamp",
              "until: Events up to a timestamp",
              "limit: Maximum number of events"
            ]
          }
        },
  
        "event_validation": {
          "title": "Event Validation",
          "steps": [
            "Verify event ID (correct calculation)",
            "Validate signature",
            "Check timestamp (not in future)",
            "Verify required fields"
          ]
        },
  
        "best_practices": {
          "title": "Best Practices",
          "client_practices": [
            "Connect to multiple relays for redundancy",
            "Local caching of frequently used data",
            "Implement exponential backoff for connection errors",
            "Validate all received events"
          ],
          "relay_practices": [
            "Efficient event storage and indexing",
            "Implementation of rate limiting",
            "Configurable event retention",
            "Robust error handling"
          ]
        }
      },
  
      "example_usage": "Practical Example",
      "example_usage_intro": "The following example shows how a typical Nostr event is structured:",
      "example_usage_scenario": "Suppose a user wants to publish a public message:",
      "example_message_content": "Hello Nostr world! 👋",
      
      "example_explanation": "Breakdown of the example event:",
      "example_id": "Unique ID of the event, calculated from event data",
      "example_pubkey": "Author's public key",
      "example_created_at": "Creation timestamp as Unix timestamp",
      "example_kind": "Kind 1 indicates this is a public text note",
      "example_tags": "Optional metadata and references",
      "example_content": "The actual message text",
      "example_sig": "Cryptographic signature for verification",
      
      "event_fetcher": "Event Fetcher",
      "fetched_event": "Fetched Event",
      "fetch_event": "Fetch Event",
      "detailed_github_page": "Detailed Documentation on GitHub",
  
      "example": {
        "try_it_out": "Try it out with this example event:",
        "use_this_id": "Use this ID"
      },
      "labels": {
        "event_id": "Event ID"
      },
      "buttons": {
        "fetch_event": "Fetch Event",
        "fetching": "Fetching...",
        "clear_input": "Clear input"
      },
      "placeholder": {
        "enter_event_id": "Enter event ID..."
      },
      
      "validation_errors": {
        "invalid_id": "Invalid event ID",
        "invalid_sig": "Invalid signature",
        "future_timestamp": "Timestamp is in the future",
        "missing_fields": "Missing required fields"
      },
      
      "errors": {
        "no_relay_connection": "No relay connection available",
        "event_not_found": "Event not found",
        "fetch_failed": "Failed to fetch event"
      }
    },

  "nip2": {
    "nip2_title": "NIP-02",
    "description": "This NIP describes the second implementation possibility for the Nostr protocol.",
    "details": "Here is a detailed explanation of NIP-02.",
    "example_usage": "Example Usage",
    "example_usage_intro": "Here is a simple example of using NIP-02 in a protocol:",
    "example_usage_scenario": "Imagine you want to create an event that represents a user action. The event might look like this:",
    "example_message_content": "Example content for user action",
    "example_explanation": "In this example:",
    "example_id": "A unique identifier for the event.",
    "example_pubkey": "The username or ID of the author.",
    "example_created_at": "The creation date of the event in Unix timestamp.",
    "example_kind": "The type of event, in this case, a user action.",
    "example_tags": "A list of tags that categorize the event.",
    "example_content": "The actual content of the user action.",
    "example_sig": "A digital signature that ensures the integrity and authenticity of the event.",
    "example_filters": "Clients can then use filters to subscribe to only specific events, e.g., all actions from 'user123' or all events with the tag 'action'.",
    "event_fetcher": "Event Fetcher",
    "fetched_event": "Fetched Event",
    "detailed_github_page": "Detailed GitHub Page"
  }
}