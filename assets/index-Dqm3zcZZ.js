import{r as o,j as e}from"./react-BVBiHVO-.js";import{c as G}from"./react-dom-DbOC9Och.js";import{T as J,X,M as Q,H as I,P as Y,S as P,U as z,N as ee,C as te,a as C,b as ne,A as k,c as w,d as F,e as se,f as ie,F as B,g as re,h as D,i as ae,K as le,j as oe,k as ce}from"./lucide-react-BVMnD2q5.js";import{u as S,i as de}from"./react-i18next-BDWCgMw4.js";import"./websocket-polyfill-BiuJuH8t.js";import{N as ue}from"./@nostr-dev-kit-jgnLO15S.js";import{i as he}from"./i18next-vSwsns86.js";import{B as pe}from"./i18next-browser-languagedetector-RoqpcJAD.js";import"./scheduler-CzFDRTuY.js";import"./debug-BtKHo6Hi.js";import"./ms-CzQ2E3wO.js";import"./tstl-CBngGbWh.js";import"./websocket-CFkA9TXo.js";import"./es5-ext-B-aRoSt4.js";import"./nostr-tools-BCpAdhG5.js";import"./@noble-D0EBiHBN.js";import"./tseep-BXNw9TWC.js";import"./typescript-lru-cache-CrdSf7DB.js";import"./@scure-BSzfOT6V.js";import"./light-bolt11-decoder-BzXOEWTB.js";(function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))a(i);new MutationObserver(i=>{for(const r of i)if(r.type==="childList")for(const c of r.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&a(c)}).observe(document,{childList:!0,subtree:!0});function s(i){const r={};return i.integrity&&(r.integrity=i.integrity),i.referrerPolicy&&(r.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?r.credentials="include":i.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function a(i){if(i.ep)return;i.ep=!0;const r=s(i);fetch(i.href,r)}})();class me extends o.Component{constructor(n){super(n),this.state={hasError:!1,error:null,errorInfo:null}}static getDerivedStateFromError(){return{hasError:!0}}componentDidCatch(n,s){this.setState({error:n,errorInfo:s}),console.error("Error caught by ErrorBoundary:",n,s)}render(){var n;return this.state.hasError?e.jsx("div",{className:"error-boundary",children:e.jsxs("div",{className:"error-content",children:[e.jsx(J,{className:"error-icon",size:48}),e.jsx("h1",{children:"Oops, etwas ist schiefgelaufen"}),e.jsx("p",{children:"Es tut uns leid, aber es ist ein Fehler aufgetreten. Bitte laden Sie die Seite neu."}),e.jsx("button",{onClick:()=>window.location.reload(),className:"refresh-button",children:"Seite neu laden"}),this.state.error&&e.jsxs("details",{className:"error-details",children:[e.jsx("summary",{children:"Technische Details"}),e.jsx("pre",{children:this.state.error.toString()}),e.jsx("pre",{children:(n=this.state.errorInfo)==null?void 0:n.componentStack})]})]})}):this.props.children}}const ve=[{id:"home",label:"Startseite"},{id:"nip1",label:"NIP-01"},{id:"nip2",label:"NIP-02"}],xe=({setActivePage:t,activePage:n})=>{const{i18n:s}=S(),[a,i]=o.useState(!1),r=u=>{s.changeLanguage(u)},c=()=>{i(!a)},p=u=>{t(u),i(!1),window.scrollTo({top:0,behavior:"smooth"})};return e.jsxs(e.Fragment,{children:[e.jsxs("div",{className:"language-switcher",children:[e.jsx("button",{onClick:()=>r("de"),children:"DE"}),e.jsx("button",{onClick:()=>r("en"),children:"EN"})]}),a&&e.jsx("div",{className:"blur-background",onClick:c}),e.jsxs("nav",{className:"navbar",children:[e.jsx("button",{className:"menu-icon",onClick:c,"aria-label":"Toggle menu",children:a?e.jsx(X,{size:24}):e.jsx(Q,{size:24})}),e.jsx("div",{className:"navbar-container",children:e.jsx("ul",{className:a?"show":"",children:ve.map(({id:u,label:m})=>e.jsx("li",{onClick:()=>p(u),className:n===u?"active":"",children:m},u))})})]})]})},T=(t,n)=>{try{const s=t(n,{returnObjects:!0});return Array.isArray(s)?s:[]}catch(s){return console.error(`Translation error for key ${n}:`,s),[]}},b=({title:t,icon:n,children:s})=>e.jsxs("section",{className:"content-section",children:[e.jsxs("div",{className:"section-header",children:[n,e.jsx("h2",{children:t})]}),s]}),A=()=>{const{t,ready:n}=S("home");if(!n)return e.jsxs("div",{className:"loading-container",children:[e.jsx("div",{className:"loading-spinner"}),e.jsx("p",{children:"Loading..."})]});const s=()=>e.jsxs("div",{className:"event-structure",children:[e.jsx("h3",{children:t("event_structure.title")}),e.jsx("div",{className:"code-example",children:e.jsx("pre",{children:`{
  "id": "...",        // ${t("event_structure.id_desc")}
  "pubkey": "...",    // ${t("event_structure.pubkey_desc")}
  "created_at": ...,  // ${t("event_structure.created_at_desc")}
  "kind": ...,        // ${t("event_structure.kind_desc")}
  "tags": [...],      // ${t("event_structure.tags_desc")}
  "content": "...",   // ${t("event_structure.content_desc")}
  "sig": "..."        // ${t("event_structure.sig_desc")}
}`})})]}),a=()=>e.jsxs("div",{className:"nips-explanation",children:[e.jsx("p",{className:"content-text",children:t("nips_section.intro")}),e.jsx("p",{className:"content-text",children:t("nips_section.docs")}),e.jsx("div",{className:"points-list",children:T(t,"nips_section.explanation.points").map((p,u)=>e.jsxs("div",{className:"point-item",children:[e.jsx("span",{className:"point-marker",children:"•"}),e.jsx("span",{children:p})]},u))}),e.jsxs("div",{className:"example-box",children:[e.jsx("div",{className:"example-title",children:t("nips_section.examples.title")}),e.jsxs("ul",{className:"example-list",children:[e.jsx("li",{children:t("nips_section.examples.nip01")}),e.jsx("li",{children:t("nips_section.examples.nip02")}),e.jsx("li",{children:t("nips_section.examples.nip03")}),e.jsx("li",{children:t("nips_section.examples.nip04")})]})]})]}),i=()=>e.jsxs("div",{className:"kinds-section",children:[e.jsxs("div",{className:"kinds-explanation",children:[e.jsx("h3",{children:t("event_kinds.explanation_title")}),e.jsx("p",{className:"kinds-intro",children:t("event_kinds.explanation_intro")}),e.jsx("div",{className:"points-list",children:T(t,"event_kinds.purpose_points").map((p,u)=>e.jsxs("div",{className:"point-item",children:[e.jsx("span",{className:"point-marker",children:"•"}),e.jsx("span",{children:p})]},u))}),e.jsx("p",{children:t("event_kinds.connection_to_nips")})]}),e.jsxs("div",{className:"ranges-grid",children:[e.jsx("h3",{children:t("event_kinds.ranges.title")}),e.jsxs("div",{className:"range-grid",children:[e.jsxs("div",{className:"range-item",children:[e.jsx("span",{className:"range-value",children:"0-999"}),e.jsx("p",{children:t("event_kinds.ranges.regular")})]}),e.jsxs("div",{className:"range-item",children:[e.jsx("span",{className:"range-value",children:"1000-9999"}),e.jsx("p",{children:t("event_kinds.ranges.regular_replaceable")})]}),e.jsxs("div",{className:"range-item",children:[e.jsx("span",{className:"range-value",children:"10000-19999"}),e.jsx("p",{children:t("event_kinds.ranges.ephemeral")})]}),e.jsxs("div",{className:"range-item",children:[e.jsx("span",{className:"range-value",children:"20000-29999"}),e.jsx("p",{children:t("event_kinds.ranges.parameterized")})]})]})]}),e.jsxs("div",{className:"common-kinds",children:[e.jsx("h3",{children:t("event_kinds.common_title")}),e.jsxs("div",{className:"kinds-grid",children:[e.jsxs("div",{className:"kind-item",children:[e.jsx(te,{size:20}),e.jsx("h4",{children:"Kind 0"}),e.jsx("p",{children:t("event_kinds.metadata")})]}),e.jsxs("div",{className:"kind-item",children:[e.jsx(C,{size:20}),e.jsx("h4",{children:"Kind 1"}),e.jsx("p",{children:t("event_kinds.text_note")})]}),e.jsxs("div",{className:"kind-item",children:[e.jsx(P,{size:20}),e.jsx("h4",{children:"Kind 2"}),e.jsx("p",{children:t("event_kinds.recommend_server")})]}),e.jsxs("div",{className:"kind-item",children:[e.jsx(z,{size:20}),e.jsx("h4",{children:"Kind 3"}),e.jsx("p",{children:t("event_kinds.contacts")})]}),e.jsxs("div",{className:"kind-item",children:[e.jsx(C,{size:20}),e.jsx("h4",{children:"Kind 4"}),e.jsx("p",{children:t("event_kinds.direct_message")})]}),e.jsxs("div",{className:"kind-item",children:[e.jsx(ne,{size:20}),e.jsx("h4",{children:"Kind 5"}),e.jsx("p",{children:t("event_kinds.deletion")})]})]})]}),e.jsxs("div",{className:"implementation-example",children:[e.jsx("h3",{children:t("implementation_example.title")}),e.jsx("p",{children:t("implementation_example.content")})]})]}),r=()=>e.jsxs("div",{children:[e.jsx("p",{className:"content-text",children:t("relays_section.intro")}),e.jsxs("div",{className:"feature-grid",children:[e.jsxs("div",{className:"feature-item",children:[e.jsx("h4",{children:t("relays_section.features.decentralized.title")}),e.jsx("p",{children:t("relays_section.features.decentralized.description")})]}),e.jsxs("div",{className:"feature-item",children:[e.jsx("h4",{children:t("relays_section.features.redundant.title")}),e.jsx("p",{children:t("relays_section.features.redundant.description")})]}),e.jsxs("div",{className:"feature-item",children:[e.jsx("h4",{children:t("relays_section.features.flexible.title")}),e.jsx("p",{children:t("relays_section.features.flexible.description")})]}),e.jsxs("div",{className:"feature-item",children:[e.jsx("h4",{children:t("relays_section.features.scalable.title")}),e.jsx("p",{children:t("relays_section.features.scalable.description")})]})]})]}),c=()=>e.jsxs("div",{children:[e.jsx("p",{className:"content-text",children:t("clients_section.intro")}),e.jsxs("div",{className:"client-types",children:[e.jsxs("div",{className:"client-type",children:[e.jsx("h4",{children:t("clients_section.types.web.title")}),e.jsx("p",{children:t("clients_section.types.web.description")})]}),e.jsxs("div",{className:"client-type",children:[e.jsx("h4",{children:t("clients_section.types.mobile.title")}),e.jsx("p",{children:t("clients_section.types.mobile.description")})]}),e.jsxs("div",{className:"client-type",children:[e.jsx("h4",{children:t("clients_section.types.desktop.title")}),e.jsx("p",{children:t("clients_section.types.desktop.description")})]})]})]});return e.jsxs("article",{className:"home",children:[e.jsxs("header",{className:"home-header",children:[e.jsx("h1",{className:"title-gradient",children:t("welcome")}),e.jsx("p",{className:"intro-text",children:t("nostr_intro")})]}),e.jsxs("div",{className:"sections-container",children:[e.jsxs(b,{title:t("protocol_basics"),icon:e.jsx(I,{className:"section-icon",size:24}),children:[e.jsx("p",{className:"content-text",children:t("protocol_basics_intro")}),s()]}),e.jsxs(b,{title:t("protocol_concepts.title"),icon:e.jsx(Y,{className:"section-icon",size:24}),children:[e.jsx("h3",{children:t("protocol_concepts.nips_vs_kinds")}),e.jsx("p",{className:"content-text",children:t("protocol_concepts.nips_vs_kinds_explanation")}),a(),i()]}),e.jsx(b,{title:t("relays_section.title"),icon:e.jsx(P,{className:"section-icon",size:24}),children:r()}),e.jsx(b,{title:t("clients_section.title"),icon:e.jsx(z,{className:"section-icon",size:24}),children:c()}),e.jsx(b,{title:t("summary.title"),icon:e.jsx(ee,{className:"section-icon",size:24}),children:e.jsx("p",{className:"content-text",children:t("summary.text")})})]})]})},fe=({children:t,variant:n="default",className:s,...a})=>e.jsx("div",{role:"alert",className:`alert ${n} ${s||""}`,...a,children:t}),ge=({children:t,className:n,...s})=>e.jsx("h5",{className:`alert-title ${n||""}`,...s,children:t}),_e=({children:t,className:n,...s})=>e.jsx("div",{className:`alert-description ${n||""}`,...s,children:t}),be=["wss://pablof7z.nostr1.com","wss://offchain.pub","wss://relay.f7z.io","wss://relay.damus.io","wss://relay.snort.social","wss://offchain.pub/","wss://nostr.mom","wss://nostr-pub.wellorder.net","wss://purplepag.es","wss://brb.io/"],V=({onConnect:t})=>(o.useEffect(()=>{(async()=>{const s=new ue({explicitRelayUrls:[...be],enableOutboxModel:!1});await s.connect(6e3),t(s),console.log("Connected to relays")})()},[t]),null),Ne=({ndk:t})=>{const[n,s]=o.useState(!1),[a,i]=o.useState(!1),[r,c]=o.useState(null),p=async()=>{if(t)try{i(!0),c(null),await t.connect(),s(!0)}catch(d){c("Verbindung fehlgeschlagen. Bitte versuchen Sie es erneut."),console.error("Connection error:",d)}finally{i(!1)}},u=async()=>{if(!(!t||!t.pool))try{const d=Array.from(t.pool.relays.values());await Promise.all(d.map(async v=>{try{await v.disconnect()}catch(g){console.error(`Failed to disconnect from ${v.url}:`,g)}})),s(!1)}catch(d){console.error("Disconnect error:",d)}};o.useEffect(()=>{if(!(t!=null&&t.pool))return;const d=()=>{const g=Array.from(t.pool.relays.values()).some(x=>x.status===1);s(g)},v=()=>{const g=Array.from(t.pool.relays.values()).some(x=>x.status===1);s(g)};return t.pool.on("relay:connect",d),t.pool.on("relay:disconnect",v),d(),()=>{t.pool.removeListener("relay:connect",d),t.pool.removeListener("relay:disconnect",v)}},[t]);const m=()=>t!=null&&t.pool?Array.from(t.pool.relays.values()).filter(d=>d.status===1):[];return e.jsxs("div",{className:"relay-controller",children:[e.jsxs("div",{className:"status-display",children:[e.jsxs("div",{className:"status-indicator",children:[a?e.jsx(k,{className:"animate-spin text-yellow-500"}):n?e.jsx(w,{className:"text-green-500"}):e.jsx(F,{className:"text-red-500"}),e.jsx("span",{children:a?"Verbindung wird hergestellt...":n?"Verbunden":"Nicht verbunden"})]}),r&&e.jsx("div",{className:"error-message",children:r})]}),e.jsxs("div",{className:"control-buttons",children:[e.jsxs("button",{onClick:p,disabled:n||a,className:"connect-button",children:[e.jsx(se,{className:n?"text-green-500":"text-gray-500"}),"Verbinden"]}),e.jsxs("button",{onClick:u,disabled:!n||a,className:"disconnect-button",children:[e.jsx(ie,{className:n?"text-gray-500":"text-red-500"}),"Trennen"]})]}),n&&e.jsxs("div",{className:"relay-list",children:[e.jsxs("h4",{children:["Verbundene Relays (",m().length,"):"]}),e.jsx("ul",{children:m().map(d=>e.jsxs("li",{children:[e.jsx(w,{className:"text-green-500"}),new URL(d.url).hostname]},d.url))})]})]})},je=(t,n)=>{try{const s=t(n,{returnObjects:!0});return Array.isArray(s)?s:[]}catch(s){return console.warn(`Translation error for key ${n}:`,s),[]}},K=(t,n)=>{try{const s=t(n,{returnObjects:!0});return typeof s=="object"&&s!==null?s:{}}catch(s){return console.warn(`Translation error for key ${n}:`,s),{}}},j=({id:t,title:n,icon:s,children:a,isExpanded:i,onToggle:r})=>e.jsxs("div",{className:"section",id:t,children:[e.jsxs("button",{className:"section-header",onClick:r,"aria-expanded":i,"aria-controls":`section-content-${t}`,children:[s,e.jsx("h2",{children:n}),i?e.jsx(oe,{className:"transition-transform"}):e.jsx(ce,{className:"transition-transform"})]}),i&&e.jsx("div",{className:"section-content",id:`section-content-${t}`,role:"region","aria-labelledby":t,children:a})]}),R="86885d03218abe92f1800fb2f0a306535710111d60e8c9aafd0179db11963ed7",ye=()=>{const{t}=S("nip1"),[n,s]=o.useState(null),[a,i]=o.useState(null),[r,c]=o.useState(""),[p,u]=o.useState(!1),[m,d]=o.useState(null),[v,g]=o.useState("overview"),[x,f]=o.useState(null),N=o.useCallback(l=>{g(v===l?"":l)},[v]),O=o.useCallback(()=>{c(R),d(null),f(null)},[]),W=l=>/^[0-9a-f]{64}$/.test(l),L=l=>({...l,created_at:l.created_at,tags:l.tags.map(h=>h.map(_=>typeof _=="string"?_:JSON.stringify(_)))}),M=async l=>{if(!a){d(t("errors.no_relay_connection")),f(!1);return}if(!W(l)){d(t("validation_errors.invalid_id")),f(!1);return}u(!0),d(null),f(null);try{const h=await a.fetchEvent(l);if(h){const _=L(h.rawEvent());s(_),f(!0)}else d(t("errors.event_not_found")),f(!1)}catch(h){console.error("Fetch error:",h),d(h instanceof Error?h.message:t("errors.fetch_failed")),f(!1)}finally{u(!1)}},H=async l=>{l.preventDefault(),await M(r)},$=o.useCallback(()=>{c(""),d(null),f(null),s(null)},[]),U=o.useCallback(()=>e.jsxs("div",{className:"overview",children:[e.jsx("p",{className:"description",children:t("sections.overview.description")}),e.jsx("ul",{className:"overview-list",children:je(t,"sections.overview.points").map((l,h)=>e.jsx("li",{children:l},h))})]}),[t]),Z=o.useCallback(()=>e.jsxs("div",{className:"event-structure",children:[e.jsx("p",{className:"description",children:t("sections.event_structure.description")}),e.jsx("div",{className:"fields-grid",children:Object.entries(K(t,"sections.event_structure.fields")).map(([l,h])=>e.jsxs("div",{className:"field-card",children:[e.jsxs("div",{className:"field-header",children:[Ee(l),e.jsx("h3",{children:h.title})]}),e.jsx("p",{className:"field-description",children:h.description}),h.technical&&e.jsx("div",{className:"technical-note",children:e.jsx("code",{children:h.technical})})]},l))})]}),[t]),q=o.useCallback(()=>e.jsxs("div",{className:"relay-communication",children:[e.jsx("p",{className:"description",children:t("sections.relay_communication.description")}),e.jsxs("div",{className:"message-types",children:[e.jsx("h3",{children:t("sections.relay_communication.messages.types.title")}),e.jsx("div",{className:"types-grid",children:Object.entries(K(t,"sections.relay_communication.messages.types")).filter(([l])=>l!=="title").map(([l,h])=>e.jsxs("div",{className:"type-card",children:[e.jsx("h4",{children:l}),e.jsx("p",{children:String(h)})]},l))})]})]}),[t]);return e.jsxs("div",{className:"nip1-container",children:[e.jsx(V,{onConnect:i}),e.jsxs("header",{className:"nip1-header",children:[e.jsx("h1",{children:t("nip1_title")}),e.jsx("p",{className:"intro-text",children:t("key_protocol_description")})]}),e.jsxs("main",{className:"nip1-content",children:[e.jsxs("div",{className:"content-sections",children:[e.jsx(j,{id:"overview",title:t("sections.overview.title"),icon:e.jsx(I,{className:"section-icon"}),isExpanded:v==="overview",onToggle:()=>N("overview"),children:U()}),e.jsx(j,{id:"event-structure",title:t("sections.event_structure.title"),icon:e.jsx(B,{className:"section-icon"}),isExpanded:v==="event-structure",onToggle:()=>N("event-structure"),children:Z()}),e.jsx(j,{id:"relay-communication",title:t("sections.relay_communication.title"),icon:e.jsx(k,{className:"section-icon"}),isExpanded:v==="relay-communication",onToggle:()=>N("relay-communication"),children:q()})]}),e.jsxs("div",{className:"interactive-container",children:[e.jsx("div",{className:"relay-control-section",children:e.jsx(Ne,{ndk:a})}),e.jsxs("section",{className:"interactive-section",children:[e.jsx("h2",{className:"section-title",children:t("event_fetcher")}),e.jsxs("div",{className:"example-container",children:[e.jsx("p",{className:"example-text",children:t("example.try_it_out")}),e.jsxs("div",{className:"example-id-container",children:[e.jsx("code",{className:"example-id",children:R}),e.jsx("button",{type:"button",className:"example-button",onClick:O,children:t("example.use_this_id")})]})]}),e.jsxs("form",{onSubmit:H,className:"fetch-form",children:[e.jsxs("div",{className:"input-group",children:[e.jsx("label",{htmlFor:"eventId",children:t("labels.event_id")}),e.jsxs("div",{className:"input-wrapper",children:[e.jsx("input",{id:"eventId",type:"text",value:r,onChange:l=>c(l.target.value),placeholder:t("placeholder.enter_event_id"),className:`event-input ${x===!0?"success":""} ${x===!1?"error":""}`,"aria-invalid":m?"true":"false","aria-describedby":m?"input-error":void 0}),r&&e.jsx("button",{type:"button",className:"clear-button",onClick:$,"aria-label":t("buttons.clear_input"),children:"×"})]})]}),e.jsx("button",{type:"submit",disabled:p||!a||!r.trim(),className:"fetch-button","aria-busy":p,children:p?e.jsxs(e.Fragment,{children:[e.jsx(k,{className:"animate-spin"}),t("buttons.fetching")]}):e.jsxs(e.Fragment,{children:[x===!0&&e.jsx(w,{className:"success-icon"}),x===!1&&e.jsx(F,{className:"error-icon"}),t("buttons.fetch_event")]})})]}),m&&e.jsxs(fe,{variant:"destructive",className:"mt-4",children:[e.jsx(ge,{children:t("error")}),e.jsx(_e,{children:m})]}),n&&e.jsxs("div",{className:"result-section",role:"region","aria-live":"polite",children:[e.jsx("h3",{children:t("fetched_event")}),e.jsx("div",{className:"json-result",children:e.jsx("pre",{children:JSON.stringify(n,null,2)})})]})]})]})]}),e.jsx("footer",{className:"nip1-footer",children:e.jsx("a",{href:"https://github.com/nostr-protocol/nips/blob/master/01.md",target:"_blank",rel:"noopener noreferrer",className:"github-link",children:t("detailed_github_page")})})]})},Ee=t=>{const n={size:18,className:"field-icon"};switch(t){case"id":return e.jsx(I,{...n});case"pubkey":return e.jsx(le,{...n});case"created_at":return e.jsx(ae,{...n});case"kind":return e.jsx(D,{...n});case"tags":return e.jsx(D,{...n});case"content":return e.jsx(B,{...n});case"sig":return e.jsx(re,{...n});default:return null}},ke=()=>{const[t,n]=o.useState(null),[s,a]=o.useState(""),i=async c=>{if(console.log(`Fetching NIP-01 Profile Event for pubkey: ${c}`),t)try{const p={kinds:[0],authors:[c],limit:1};console.log("Subscribing with filter:",p);const u=t.subscribe(p);u.on("event",m=>{console.log("Event received:",m),console.log("Full JSON:",JSON.stringify(m,null,2))}),u.on("eose",()=>{console.log("End of subscription events")}),u.on("close",m=>{console.error("Subscription closed with error:",m)})}catch(p){console.error("Error fetching event:",p)}else console.log("NDK instance is null")},r=async c=>{c.preventDefault(),i(s)};return e.jsxs("div",{className:"nip1-container",children:[e.jsx(V,{onConnect:n}),e.jsx("h2",{children:"NIP-01: Profile Event"}),e.jsx("div",{className:"input-form-container",children:e.jsxs("form",{onSubmit:r,children:[e.jsxs("label",{children:["Pubkey:",e.jsx("input",{type:"text",value:s,onChange:c=>a(c.target.value)})]}),e.jsx("button",{type:"submit",children:"Fetch Event"})]})})]})},we=()=>{const[t,n]=o.useState("home"),s=()=>{switch(t){case"home":return e.jsx(A,{});case"nip1":return e.jsx(ye,{});case"nip2":return e.jsx(ke,{});default:return e.jsx(A,{})}};return e.jsx(me,{children:e.jsxs("div",{className:"app",children:[e.jsx(xe,{setActivePage:n,activePage:t}),e.jsx("main",{className:"container",children:s()})]})})},Ie={welcome:"NIPs Explorer",nostr_intro:"Nostr is an open protocol for decentralized communication. It enables users to send and receive messages and other data over a network of relays.",protocol_basics:"Protocol Basics",protocol_basics_intro:"Nostr is based on a simple but powerful event model. Every interaction in the network is an event with a defined structure.",event_structure:{title:"Event Structure",id_desc:"Unique ID (SHA256 hash of event data)",pubkey_desc:"Public key of the author",created_at_desc:"Creation timestamp (Unix timestamp)",kind_desc:"Type of event (e.g., 1 for text message)",tags_desc:"Additional metadata and references",content_desc:"The actual content of the event",sig_desc:"Digital signature for verification"},protocol_concepts:{title:"Core Concepts",nips_vs_kinds:"NIPs vs Event Kinds",nips_vs_kinds_explanation:"NIPs (Nostr Implementation Possibilities) and Event Kinds are two different but important concepts in Nostr:"},nips_section:{title:"What are NIPs?",intro:"NIPs (Nostr Implementation Possibilities) are proposals and standards that describe how various aspects of the Nostr protocol can be implemented. They help developers create compatible and interoperable applications.",docs:"NIPs are documents that describe various aspects of the Nostr protocol. They can propose new features, improve existing features, or provide best practices for implementing the protocol.",website:"On this website, you will find explanations and examples of various NIPs to help you better understand and use the Nostr protocol.",explanation:{title:"NIPs (Nostr Implementation Possibilities)",description:"NIPs are technical specification documents that describe:",points:["How new features should be implemented in the Nostr protocol","What standards all clients and relays must follow","How different types of data are structured","How communication between clients and relays works"],example:"For example, NIP-01 describes the basic protocol, while NIP-02 defines the format for contact lists."},examples:{title:"NIP Examples:",nip01:"NIP-01: Basic Protocol",nip02:"NIP-02: Contact List",nip03:"NIP-03: OpenTimestamps Attestations",nip04:"NIP-04: Encrypted Direct Messages"}},event_kinds:{title:"Event Kinds",explanation_title:"What are Event Kinds?",explanation_intro:"Event Kinds are numerical identifiers that define the type and purpose of a single event. They are part of the actual data and determine:",purpose_points:["What type of content an event contains","How clients should display the content","How relays should process the event","How long the event should be stored"],connection_to_nips:"Event Kinds are defined and standardized in various NIPs. For example, the basic Kinds 0-3 were established in NIP-01.",ranges:{title:"Kind Ranges and Their Meaning",regular:"Regular events like metadata, text messages, and contact lists",regular_replaceable:"Replaceable events where only the latest version is relevant",ephemeral:"Short-lived events that don't need permanent storage",parameterized:"Parameterized events for special use cases"},common_title:"Commonly Used Event Kinds",metadata:"Profile information like name, picture, and description",text_note:"Public text messages (similar to tweets)",recommend_server:"Recommendations for relay servers",contacts:"List of followed users and their preferred relays",direct_message:"Encrypted direct messages",deletion:"Deletes previously published events"},implementation_example:{title:"Example of the Connection:",content:"NIP-01 defines that an event of Kind 1 is a public text message. So when a client receives an event with kind: 1, it knows thanks to NIP-01 that it should display the content as a text message."},relays_section:{title:"What are Relays?",intro:"Relays are servers that forward messages and other data in the Nostr network. They act as intermediaries between clients and ensure that messages are delivered to the correct recipients.",features:{decentralized:{title:"Decentralized",description:"Anyone can operate a relay"},redundant:{title:"Redundant",description:"Multiple relays for reliability"},flexible:{title:"Flexible",description:"Free choice of relays"},scalable:{title:"Scalable",description:"Distributed load balancing"}}},clients_section:{title:"What are Clients?",intro:"Clients are applications that users use to interact with the Nostr network. They allow users to send and receive messages, publish data, and access information shared by other users.",types:{web:{title:"Web Clients",description:"Direct access via browser"},mobile:{title:"Mobile Apps",description:"For iOS and Android on the go"},desktop:{title:"Desktop Apps",description:"Full functionality on computer"}}},summary:{title:"Summary",text:"Nostr is a decentralized communication protocol based on relays and clients. NIPs provide the standards and proposals that help developers implement and extend the protocol. This website offers an introduction to Nostr and NIPs, as well as examples and explanations to help you better understand and use the protocol."}},Se={nip1_title:"NIP-01: Basic Protocol",key_protocol:"Basic Protocol",key_protocol_description:"NIP-01 defines the fundamental concepts and mechanisms of the Nostr protocol. It is the cornerstone for all other NIPs and must be supported by all Nostr implementations.",sections:{overview:{title:"Overview",points:["NIP-01 establishes the basic structure of events","Defines communication between clients and relays","Describes authentication and validation of events","Establishes the publish/subscribe model for data exchange"]},event_structure:{title:"Event Structure",description:"An event is the basic data unit in Nostr. Every action and piece of information is transmitted as an event.",fields:{id:{title:"ID",description:"A SHA-256 hash of all other event fields. Serves as a unique identifier.",technical:"Calculated from the serialization of event data (excluding 'id' and 'sig')"},pubkey:{title:"Public Key",description:"The event author's public key in hexadecimal format.",technical:"32-byte Schnorr key"},created_at:{title:"Creation Timestamp",description:"Unix timestamp of event creation in seconds.",technical:"Must be a valid Unix timestamp"},kind:{title:"Event Kind",description:"Numerical value defining the type of event.",examples:["0: Metadata (profile information)","1: Short text note","2: Recommended relay servers","3: Contacts","4: Encrypted direct message"]},tags:{title:"Tags",description:"List of tags for additional metadata and references.",common_tags:["e: Reference to other events","p: Reference to public keys","t: Thematic hashtags"]},content:{title:"Content",description:"The actual content of the event as text.",notes:["Can contain any text","Format depends on event kind","Can be encrypted"]},sig:{title:"Signature",description:"Cryptographic signature to verify authenticity.",technical:"64-byte Schnorr signature of the event ID value"}}},relay_communication:{title:"Relay Communication",description:"Communication between clients and relays occurs via WebSocket connections.",messages:{types:{title:"Message Types",EVENT:"Send a new event",REQ:"Request events with specific filters",CLOSE:"End a subscription",EOSE:"End of stored event stream"}},subscription:{title:"Subscription System",description:"Clients can subscribe to events using filters:",filter_options:["ids: Specific event IDs","authors: Events from specific authors","kinds: Specific event types","since: Events after a timestamp","until: Events up to a timestamp","limit: Maximum number of events"]}},event_validation:{title:"Event Validation",steps:["Verify event ID (correct calculation)","Validate signature","Check timestamp (not in future)","Verify required fields"]},best_practices:{title:"Best Practices",client_practices:["Connect to multiple relays for redundancy","Local caching of frequently used data","Implement exponential backoff for connection errors","Validate all received events"],relay_practices:["Efficient event storage and indexing","Implementation of rate limiting","Configurable event retention","Robust error handling"]}},example_usage:"Practical Example",example_usage_intro:"The following example shows how a typical Nostr event is structured:",example_usage_scenario:"Suppose a user wants to publish a public message:",example_message_content:"Hello Nostr world! 👋",example_explanation:"Breakdown of the example event:",example_id:"Unique ID of the event, calculated from event data",example_pubkey:"Author's public key",example_created_at:"Creation timestamp as Unix timestamp",example_kind:"Kind 1 indicates this is a public text note",example_tags:"Optional metadata and references",example_content:"The actual message text",example_sig:"Cryptographic signature for verification",event_fetcher:"Event Fetcher",fetched_event:"Fetched Event",fetch_event:"Fetch Event",detailed_github_page:"Detailed Documentation on GitHub",example:{try_it_out:"Try it out with this example event:",use_this_id:"Use this ID"},labels:{event_id:"Event ID"},buttons:{fetch_event:"Fetch Event",fetching:"Fetching...",clear_input:"Clear input"},placeholder:{enter_event_id:"Enter event ID..."},validation_errors:{invalid_id:"Invalid event ID",invalid_sig:"Invalid signature",future_timestamp:"Timestamp is in the future",missing_fields:"Missing required fields"},errors:{no_relay_connection:"No relay connection available",event_not_found:"Event not found",fetch_failed:"Failed to fetch event"}},Pe={nip2_title:"NIP-02",description:"This NIP describes the second implementation possibility for the Nostr protocol.",details:"Here is a detailed explanation of NIP-02.",example_usage:"Example Usage",example_usage_intro:"Here is a simple example of using NIP-02 in a protocol:",example_usage_scenario:"Imagine you want to create an event that represents a user action. The event might look like this:",example_message_content:"Example content for user action",example_explanation:"In this example:",example_id:"A unique identifier for the event.",example_pubkey:"The username or ID of the author.",example_created_at:"The creation date of the event in Unix timestamp.",example_kind:"The type of event, in this case, a user action.",example_tags:"A list of tags that categorize the event.",example_content:"The actual content of the user action.",example_sig:"A digital signature that ensures the integrity and authenticity of the event.",example_filters:"Clients can then use filters to subscribe to only specific events, e.g., all actions from 'user123' or all events with the tag 'action'.",event_fetcher:"Event Fetcher",fetched_event:"Fetched Event",detailed_github_page:"Detailed GitHub Page"},y={home:Ie,nip1:Se,nip2:Pe},ze={welcome:"NIPs Explorer",nostr_intro:"Nostr ist ein offenes Protokoll für dezentrale Kommunikation. Es ermöglicht Benutzern, Nachrichten und andere Daten über ein Netzwerk von Relays zu senden und zu empfangen.",protocol_basics:"Protokoll-Grundlagen",protocol_basics_intro:"Nostr basiert auf einem einfachen aber mächtigen Eventmodell. Jede Interaktion im Netzwerk ist ein Event mit einer definierten Struktur.",event_structure:{title:"Event-Struktur",id_desc:"Eindeutige ID (SHA256 Hash der Event-Daten)",pubkey_desc:"Öffentlicher Schlüssel des Autors",created_at_desc:"Erstellungszeitpunkt (Unix Timestamp)",kind_desc:"Art des Events (z.B. 1 für Textnachricht)",tags_desc:"Zusätzliche Metadaten und Verknüpfungen",content_desc:"Der eigentliche Inhalt des Events",sig_desc:"Digitale Signatur zur Verifikation"},protocol_concepts:{title:"Zentrale Konzepte",nips_vs_kinds:"NIPs vs Event Kinds",nips_vs_kinds_explanation:"NIPs (Nostr Implementation Possibilities) und Event Kinds sind zwei unterschiedliche, aber wichtige Konzepte in Nostr:"},nips_section:{title:"Was sind NIPs?",intro:"NIPs (Nostr Implementation Possibilities) sind Vorschläge und Standards, die beschreiben, wie verschiedene Aspekte des Nostr-Protokolls implementiert werden können. Sie helfen Entwicklern, kompatible und interoperable Anwendungen zu erstellen.",docs:"NIPs sind Dokumente, die verschiedene Aspekte des Nostr-Protokolls beschreiben. Sie können neue Funktionen vorschlagen, bestehende Funktionen verbessern oder bewährte Verfahren zur Implementierung des Protokolls bereitstellen.",website:"Auf dieser Website finden Sie Erklärungen und Beispiele zu verschiedenen NIPs, die Ihnen helfen, das Nostr-Protokoll besser zu verstehen und zu nutzen.",explanation:{title:"NIPs (Nostr Implementation Possibilities)",description:"NIPs sind technische Spezifikationsdokumente, die beschreiben:",points:["Wie neue Features im Nostr-Protokoll implementiert werden sollen","Welche Standards alle Clients und Relays befolgen müssen","Wie verschiedene Arten von Daten strukturiert werden","Wie die Kommunikation zwischen Clients und Relays funktioniert"],example:"Zum Beispiel beschreibt NIP-01 das grundlegende Protokoll, während NIP-02 das Format für Kontaktlisten definiert."},examples:{title:"NIP Beispiele:",nip01:"NIP-01: Grundprotokoll",nip02:"NIP-02: Kontaktliste",nip03:"NIP-03: OpenTimestamps Attestierungen",nip04:"NIP-04: Verschlüsselte Direktnachrichten"}},event_kinds:{title:"Event Kinds (Event-Typen)",explanation_title:"Was sind Event Kinds?",explanation_intro:"Event Kinds sind numerische Identifier, die den Typ und Zweck eines einzelnen Events definieren. Sie sind Teil der tatsächlichen Daten und bestimmen:",purpose_points:["Welche Art von Inhalt ein Event enthält","Wie Clients den Inhalt anzeigen sollen","Wie Relays das Event verarbeiten sollen","Wie lange das Event gespeichert werden soll"],connection_to_nips:"Event Kinds werden in verschiedenen NIPs definiert und standardisiert. Zum Beispiel wurden die grundlegenden Kinds 0-3 in NIP-01 festgelegt.",ranges:{title:"Kind-Bereiche und ihre Bedeutung",regular:"Reguläre Events wie Metadaten, Textnachrichten und Kontaktlisten",regular_replaceable:"Ersetzbare Events, bei denen nur die neueste Version relevant ist",ephemeral:"Kurzlebige Events, die nicht dauerhaft gespeichert werden müssen",parameterized:"Parametrisierte Events für spezielle Anwendungsfälle"},common_title:"Häufig verwendete Event Kinds",metadata:"Profilinformationen wie Name, Bild und Beschreibung",text_note:"Öffentliche Textnachrichten (ähnlich wie Tweets)",recommend_server:"Empfehlungen für Relay-Server",contacts:"Liste von gefolgten Nutzern und deren bevorzugte Relays",direct_message:"Verschlüsselte Direktnachrichten",deletion:"Löscht zuvor veröffentlichte Events"},implementation_example:{title:"Beispiel für den Zusammenhang:",content:"NIP-01 definiert, dass ein Event vom Kind 1 eine öffentliche Textnachricht ist. Wenn ein Client also ein Event mit kind: 1 empfängt, weiß er dank NIP-01, dass er den Inhalt als Textnachricht anzeigen soll."},relays_section:{title:"Was sind Relays?",intro:"Relays sind Server, die Nachrichten und andere Daten im Nostr-Netzwerk weiterleiten. Sie fungieren als Vermittler zwischen Clients und stellen sicher, dass Nachrichten an die richtigen Empfänger zugestellt werden.",features:{decentralized:{title:"Dezentral",description:"Jeder kann einen Relay betreiben"},redundant:{title:"Redundant",description:"Mehrere Relays für Ausfallsicherheit"},flexible:{title:"Flexibel",description:"Freie Wahl der Relays"},scalable:{title:"Skalierbar",description:"Verteilte Lastverteilung"}}},clients_section:{title:"Was sind Clients?",intro:"Clients sind Anwendungen, die Benutzer verwenden, um mit dem Nostr-Netzwerk zu interagieren. Sie ermöglichen es Benutzern, Nachrichten zu senden und zu empfangen, Daten zu veröffentlichen und auf Informationen zuzugreifen.",types:{web:{title:"Web Clients",description:"Direkter Zugriff über den Browser"},mobile:{title:"Mobile Apps",description:"Für iOS und Android unterwegs"},desktop:{title:"Desktop Apps",description:"Volle Funktionalität am Computer"}}},summary:{title:"Zusammenfassung",text:"Nostr ist ein dezentrales Kommunikationsprotokoll, das auf Relays und Clients basiert. NIPs bieten die Standards und Vorschläge, die Entwicklern helfen, das Protokoll zu implementieren und zu erweitern. Diese Website bietet eine Einführung in Nostr und NIPs sowie Beispiele und Erklärungen, die Ihnen helfen, das Protokoll besser zu verstehen und zu nutzen."}},Ce={nip1_title:"NIP-01: Grundprotokoll",key_protocol:"Grundprotokoll",key_protocol_description:"NIP-01 definiert die fundamentalen Konzepte und Mechanismen des Nostr-Protokolls. Es ist der Grundstein für alle weiteren NIPs und muss von allen Nostr-Implementierungen unterstützt werden.",sections:{overview:{title:"Überblick",points:["NIP-01 legt die grundlegende Struktur von Events fest","Definiert die Kommunikation zwischen Clients und Relays","Beschreibt die Authentifizierung und Validierung von Events","Etabliert das Publish/Subscribe-Modell für Datenaustausch"]},event_structure:{title:"Event-Struktur",description:"Ein Event ist die grundlegende Dateneinheit in Nostr. Jede Aktion und jede Information wird als Event übertragen.",fields:{id:{title:"ID",description:"Ein SHA-256-Hash aller anderen Event-Felder. Dient als eindeutiger Identifier.",technical:"Wird aus der Serialisierung der Event-Daten (ohne 'id' und 'sig') berechnet."},pubkey:{title:"Public Key",description:"Der öffentliche Schlüssel des Event-Autors in hexadezimaler Form.",technical:"32-Byte Schnorr-Schlüssel"},created_at:{title:"Erstellungszeitpunkt",description:"Unix-Timestamp der Event-Erstellung in Sekunden.",technical:"Muss ein gültiger Unix-Timestamp sein"},kind:{title:"Event-Art",description:"Numerischer Wert, der den Typ des Events definiert.",examples:["0: Metadaten (Profilinformationen)","1: Kurznachricht","2: Empfohlene Relay-Server","3: Kontakte","4: Verschlüsselte Direktnachricht"]},tags:{title:"Tags",description:"Liste von Tags für zusätzliche Metadaten und Verknüpfungen.",common_tags:["e: Verweis auf andere Events","p: Verweis auf Public Keys","t: Thematische Hashtags"]},content:{title:"Inhalt",description:"Der eigentliche Inhalt des Events als Text.",notes:["Kann beliebigen Text enthalten","Format hängt vom Event-Kind ab","Kann auch verschlüsselt sein"]},sig:{title:"Signatur",description:"Kryptographische Signatur zur Verifizierung der Authentizität.",technical:"64-Byte Schnorr-Signatur des Event-ID-Wertes"}}},relay_communication:{title:"Relay-Kommunikation",description:"Die Kommunikation zwischen Clients und Relays erfolgt über WebSocket-Verbindungen.",messages:{types:{title:"Nachrichtentypen",EVENT:"Senden eines neuen Events",REQ:"Anfrage nach Events mit bestimmten Filtern",CLOSE:"Beenden einer Subscription",EOSE:"Ende des gespeicherten Event-Streams"}},subscription:{title:"Subscription-System",description:"Clients können Events über Filter abonnieren:",filter_options:["ids: Spezifische Event-IDs","authors: Events von bestimmten Autoren","kinds: Bestimmte Event-Typen","since: Events nach einem Zeitpunkt","until: Events bis zu einem Zeitpunkt","limit: Maximale Anzahl an Events"]}},event_validation:{title:"Event-Validierung",steps:["Überprüfung der Event-ID (korrekte Berechnung)","Validierung der Signatur","Prüfung des Timestamps (nicht in der Zukunft)","Verifizierung der erforderlichen Felder"]},best_practices:{title:"Beste Praktiken",client_practices:["Verbindung zu mehreren Relays für Redundanz","Lokales Caching häufig genutzter Daten","Implementierung von Exponential Backoff bei Verbindungsfehlern","Validierung aller empfangenen Events"],relay_practices:["Effiziente Event-Speicherung und -Indizierung","Implementierung von Rate-Limiting","Konfigurierbare Event-Retention","Robuste Fehlerbehandlung"]}},example_usage:"Praktisches Beispiel",example_usage_intro:"Im folgenden Beispiel sehen Sie, wie ein typisches Nostr-Event strukturiert ist:",example_usage_scenario:"Angenommen, ein Benutzer möchte eine öffentliche Nachricht veröffentlichen:",example_message_content:"Hallo Nostr-Welt! 👋",example_explanation:"Aufschlüsselung des Beispiel-Events:",example_id:"Eindeutige ID des Events, berechnet aus den Event-Daten",example_pubkey:"Öffentlicher Schlüssel des Autors",example_created_at:"Erstellungszeitpunkt als Unix-Timestamp",example_kind:"Kind 1 zeigt an, dass es sich um eine öffentliche Textnachricht handelt",example_tags:"Optionale Metadaten und Verknüpfungen",example_content:"Der eigentliche Nachrichtentext",example_sig:"Kryptographische Signatur zur Verifizierung",event_fetcher:"Event-Abfrage",fetched_event:"Abgerufenes Event",fetch_event:"Event abrufen",detailed_github_page:"Ausführliche Dokumentation auf GitHub",validation_errors:{invalid_id:"Ungültige Event-ID",invalid_sig:"Ungültige Signatur",future_timestamp:"Zeitstempel liegt in der Zukunft",missing_fields:"Fehlende Pflichtfelder"},example:{try_it_out:"Probieren Sie es mit diesem Beispiel-Event aus:",use_this_id:"Diese ID verwenden"},labels:{event_id:"Event ID"},buttons:{fetch_event:"Event abrufen",fetching:"Wird abgerufen...",clear_input:"Eingabe löschen"},placeholder:{enter_event_id:"Event ID eingeben..."}},De={nip2_title:"NIP-02",description:"Dieses NIP beschreibt die zweite Implementierungsmöglichkeit für das Nostr-Protokoll.",details:"Hier ist eine detaillierte Erklärung von NIP-02.",example_usage:"Beispiel für die Verwendung",example_usage_intro:"Hier ist ein einfaches Beispiel für die Verwendung von NIP-02 in einem Protokoll:",example_usage_scenario:"Stell dir vor, du möchtest ein Ereignis erstellen, das eine Benutzeraktion darstellt. Das Ereignis könnte so aussehen:",example_message_content:"Beispielinhalt für Benutzeraktion",example_explanation:"In diesem Beispiel:",example_id:"Eine eindeutige Kennung für das Ereignis.",example_pubkey:"Der Benutzername oder die ID des Autors.",example_created_at:"Das Erstellungsdatum des Ereignisses in Unix-Zeitstempel.",example_kind:"Die Art des Ereignisses, in diesem Fall eine Benutzeraktion.",example_tags:"Eine Liste von Tags, die das Ereignis kategorisieren.",example_content:"Der eigentliche Inhalt der Benutzeraktion.",example_sig:"Eine digitale Signatur, die die Integrität und Authentizität des Ereignisses sicherstellt.",example_filters:"Clients können dann Filter verwenden, um nur bestimmte Ereignisse zu abonnieren, z.B. alle Aktionen von 'user123' oder alle Ereignisse mit dem Tag 'action'.",event_fetcher:"Event Fetcher",fetched_event:"Fetched Event",detailed_github_page:"Detaillierte GitHub-Seite"},E={home:ze,nip1:Ce,nip2:De},Te={en:{home:y.home,nip1:y.nip1,nip2:y.nip2},de:{home:E.home,nip1:E.nip1,nip2:E.nip2}};he.use(pe).use(de).init({resources:Te,fallbackLng:"en",interpolation:{escapeValue:!1},debug:!1,defaultNS:"home",ns:["home","nip1","nip2"],detection:{order:["localStorage","navigator"],caches:["localStorage"]}});G(document.getElementById("root")).render(e.jsx(o.StrictMode,{children:e.jsx(we,{})}));
